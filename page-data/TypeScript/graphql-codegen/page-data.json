{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/graphql-codegen/","result":{"data":{"site":{"siteMetadata":{"title":"leo-xee.io","author":"Leo-Xee","siteUrl":"https://leo-xee.github.io","comment":{"disqusShortName":"","utterances":"leo-xee/blog-comments"},"sponsor":{"buyMeACoffeeId":"leoxexe"}}},"markdownRemark":{"id":"32127060-7d18-5347-9d23-206f6d5766e9","excerpt":"이 글에서는 GitHub-Graph 프로젝트를 진행하면서 사용했었던 GraphQL Code Generator를 , ,  환경을 기준으로 정리합니다. 해당되지 않는다면 공식문서가 상당히 잘 정리되어있으니 공식문서를 참고하시길 바랍니다. GraphQL Code Generator란? GraphQL Code Generator는 GraphQL을 사용하는 프로젝트에서 사용할 수 있는 플러그인 기반 도구이다. 이를 사용하면 API…","html":"<p><img src=\"/46315e3e96837a2b48949e839c7dc27b/thumbNail.gif\"></p>\n<p>이 글에서는 <a href=\"https://github.com/Leo-Xee/github-graph\">GitHub-Graph 프로젝트</a>를 진행하면서 사용했었던 GraphQL Code Generator를 <code class=\"language-text\">React</code>, <code class=\"language-text\">Typescript</code>, <code class=\"language-text\">Apollo-Client</code> 환경을 기준으로 정리합니다. 해당되지 않는다면 공식문서가 상당히 잘 정리되어있으니 <a href=\"https://www.graphql-code-generator.com/\">공식문서</a>를 참고하시길 바랍니다.</p>\n<h1 id=\"graphql-code-generator란\" style=\"position:relative;\"><a href=\"#graphql-code-generator%EB%9E%80\" aria-label=\"graphql code generator란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL Code Generator란?</h1>\n<p><strong><a href=\"https://www.graphql-code-generator.com/docs/getting-started\">GraphQL Code Generator</a>는 GraphQL을 사용하는 프로젝트에서 사용할 수 있는 플러그인 기반 도구이다. 이를 사용하면 API 데이터 타입 및 인터페이스 정의와 같은 타입 관련 작업을 자동화할 수 있다.</strong> 즉, GraphQL 요청의 응답을 위한 타입들을 매번 직접 정의할 필요없이 GraphQL 스키마를 기반으로 자동으로 생성해주는 도구이다.</p>\n<br>\n<p><strong>이제 실질적인 이해를 위해서 <a href=\"https://docs.github.com/en/graphql\">GitHub GraphQL API</a>에 이를 적용해보도록 하자.</strong></p>\n<h1 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h1>\n<p>GraphQL Code Generator를 사용하기 위해서 다음 명령어로 관련 패키지들을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> graphql\n$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> @graphql-codegen/cli</code></pre></div>\n<p><code class=\"language-text\">React</code>, <code class=\"language-text\">Typescript</code>, <code class=\"language-text\">Apollo-Client</code> 프로젝트를 위한 패키지들을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> @graphql-codegen/typescript-react-apollo @graphql-codegen/typescript @graphql-codegen/typescript-operations</code></pre></div>\n<h1 id=\"설정\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95\" aria-label=\"설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정</h1>\n<p>프로젝트의 루트 위치에 <code class=\"language-text\">codegen.(yaml|yml)</code> 을 생성하고 다음과 같이 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">schema</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//api.github.com/graphql\n<span class=\"token key atrule\">documents</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./src/graphql/*.graphql\"</span>\n<span class=\"token key atrule\">generates</span><span class=\"token punctuation\">:</span>\n\t./src/graphql/generated.ts\n    <span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> typescript\n      <span class=\"token punctuation\">-</span> typescript<span class=\"token punctuation\">-</span>operations\n      <span class=\"token punctuation\">-</span> typescript<span class=\"token punctuation\">-</span>react<span class=\"token punctuation\">-</span>apollo\n    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">withHooks</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\t\t\t<span class=\"token key atrule\">scalars</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">URI</span><span class=\"token punctuation\">:</span> string</code></pre></div>\n<ul>\n<li>\n<p><strong><code class=\"language-text\">schema</code></strong></p>\n<ul>\n<li><strong>GraphQL 스키마의 위치를 지정한다.</strong></li>\n<li>일반적으로 GraphQL 서버의 엔드포인트(URL)로 지정한다.</li>\n<li>URL뿐만 아니라 다양한 형식을 지원하며 로컬 파일도 지정할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">documents</code></strong></p>\n<ul>\n<li><strong>타입을 자동생성할 GraphQL의 Query, Mutation, Subscription을 지정한다.</strong></li>\n<li>나의 경우, <code class=\"language-text\">src/graphql</code> 디렉토리에 쿼리들을 모아둘 것이기 때문에 위와 같이 작성했다.</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">generates</code></strong></p>\n<ul>\n<li><strong>타입 자동 생성을 위한 설정을 지정한다.</strong></li>\n<li>나의 경우, 쿼리들과 동일한 위치에 <code class=\"language-text\">generated.ts</code> 라는 파일명으로 생성할 것이기 때문에 위와 같이 작성했다.</li>\n</ul>\n</li>\n<li><strong><code class=\"language-text\">plugins</code></strong> : <strong>타입 자동 생성을 위한 플러그인을 지정</strong>하며 환경에 따라 달라진다.</li>\n<li>\n<p><strong><code class=\"language-text\">config</code></strong></p>\n<ul>\n<li><strong>타입 자동 생성시 적용할 옵션을 지정한다.</strong></li>\n<li>나의 경우, <code class=\"language-text\">useQuery</code>와 같은 Hook을 함께 생성해주길 원해서 <code class=\"language-text\">withHooks</code>을 사용했고 GitHub API가 추가 스칼라 타입을 사용하고 있기 때문에 이를 위한 타입을 따로 지정하지 않으면 에러가 발생해서 <code class=\"language-text\">URI</code> 타입을 <code class=\"language-text\">string</code>으로 지정하는 옵션을 추가했다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<blockquote>\n<p>참고로 <code class=\"language-text\">*.yml</code>과 <code class=\"language-text\">*.yaml</code>은 동일하게 동작하지만 공식적으로는 <code class=\"language-text\">yaml</code>의 사용을 권장한다. 과거의 윈도우 환경에서는 확장자의 길이를 3글자만 사용했었기 때문에 윈도우 개발자의 경우에는 <code class=\"language-text\">yml</code>을 사용하는 경향이 있다.</p>\n</blockquote>\n<br>\n<p>GitHub API의 경우에 인증이 필요한데 이렇게 API 요청에 인증이 필요한 경우에는 다음과 같이 <code class=\"language-text\">schema</code>의 <code class=\"language-text\">headers</code>에 토큰 키를 넣어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">schema</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">https://api.github.com/graphql</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">headers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">Authorization</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Bearer ${REACT_APP_GITHUB_TOKEN}'</span></code></pre></div>\n<p><code class=\"language-text\">package.json</code>의 <code class=\"language-text\">scripts</code> 를 다음과 같이 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"generate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"graphql-codegen -r dotenv/config\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"사용\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9\" aria-label=\"사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용</h1>\n<p><strong>지금까지 GraphQL Code Generator의 사용을 위한 모든 준비를 마쳤으니 실행해보자.</strong></p>\n<p>먼저 실행하기 위해서 사용할 쿼리가 있어야하기 때문에 위에서 지정했던 <code class=\"language-text\">documents</code>의 위치인 <code class=\"language-text\">src/graphql</code> 디렉토리에 <code class=\"language-text\">User.graphql</code> 이라는 파일을 생성하고 다음과 같이 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"q\"><pre class=\"language-q\"><code class=\"language-q\">query getUser<span class=\"token punctuation\">(</span><span class=\"token verb operator\">$</span>username<span class=\"token verb operator\">:</span> String<span class=\"token verb operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">(</span>login<span class=\"token verb operator\">:</span> <span class=\"token verb operator\">$</span>username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    login\n    name\n    email\n    websiteUrl\n    company\n    avatarUrl<span class=\"token punctuation\">(</span>size<span class=\"token verb operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    location\n    following <span class=\"token punctuation\">{</span>\n      totalCount\n    <span class=\"token punctuation\">}</span>\n    followers <span class=\"token punctuation\">{</span>\n      totalCount\n    <span class=\"token punctuation\">}</span>\n    repositories <span class=\"token punctuation\">{</span>\n      totalCount\n    <span class=\"token punctuation\">}</span>\n    starredRepositories <span class=\"token punctuation\">{</span>\n      totalCount\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음 명령어로 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> generate</code></pre></div>\n<ul>\n<li>가끔 진행 중에 에러가 발생할 수도 있는데 대부분의 경우 토큰 문제이니 토큰을 제대로 입력했는지, 토큰의 권한이 부족하지는 않는지 확인하도록 하자.</li>\n</ul>\n<br>\n<p>실행이 완료되면 <code class=\"language-text\">src/graphql</code> 디렉토리 내부에 <code class=\"language-text\">generated.ts</code> 파일이 생성되고 최하단에 작성한 쿼리에 대한 타입 정의가 되어있음을 확인할 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ...생략...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">GetUserQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  __typename<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'Query'</span>\n  user<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    __typename<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'User'</span>\n    login<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n    email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    websiteUrl<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n    company<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n    avatarUrl<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    location<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n    following<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> __typename<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'FollowingConnection'</span><span class=\"token punctuation\">;</span> totalCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n    followers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> __typename<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'FollowerConnection'</span><span class=\"token punctuation\">;</span> totalCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n    repositories<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> __typename<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'RepositoryConnection'</span><span class=\"token punctuation\">;</span> totalCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n    starredRepositories<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      __typename<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'StarredRepositoryConnection'</span>\n      totalCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">GetFollowingsQueryVariables</span> <span class=\"token operator\">=</span> Exact<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> Scalars<span class=\"token punctuation\">[</span><span class=\"token string\">'String'</span><span class=\"token punctuation\">]</span>\n  after<span class=\"token operator\">?</span><span class=\"token operator\">:</span> InputMaybe<span class=\"token operator\">&lt;</span>Scalars<span class=\"token punctuation\">[</span><span class=\"token string\">'String'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// ...생략...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useGetUserQuery</span><span class=\"token punctuation\">(</span>\n  baseOptions<span class=\"token operator\">:</span> Apollo<span class=\"token punctuation\">.</span>QueryHookOptions<span class=\"token operator\">&lt;</span>GetUserQuery<span class=\"token punctuation\">,</span> GetUserQueryVariables<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>defaultOptions<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>baseOptions <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> Apollo<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useQuery</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>GetUserQuery<span class=\"token punctuation\">,</span> GetUserQueryVariables<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n    GetUserDocument<span class=\"token punctuation\">,</span>\n    options\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useGetUserLazyQuery</span><span class=\"token punctuation\">(</span>\n  baseOptions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Apollo<span class=\"token punctuation\">.</span>LazyQueryHookOptions<span class=\"token operator\">&lt;</span>GetUserQuery<span class=\"token punctuation\">,</span> GetUserQueryVariables<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>defaultOptions<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>baseOptions <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> Apollo<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useLazyQuery</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>GetUserQuery<span class=\"token punctuation\">,</span> GetUserQueryVariables<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n    GetUserDocument<span class=\"token punctuation\">,</span>\n    options\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">GetUserQueryHookResult</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> useGetUserQuery<span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">GetUserLazyQueryHookResult</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> useGetUserLazyQuery<span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">GetUserQueryResult</span> <span class=\"token operator\">=</span> Apollo<span class=\"token punctuation\">.</span>QueryResult<span class=\"token operator\">&lt;</span>\n  GetUserQuery<span class=\"token punctuation\">,</span>\n  GetUserQueryVariables\n<span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> GetFollowingsDocument <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query getFollowings($username: String!, $after: String) {\n    user(login: $username) {\n      following(first: 20, after: $after) {\n        nodes {\n          login\n          name\n          bio\n          avatarUrl(size: 150)\n          company\n          location\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>이제 위의 타입정보를 활용해서 프로젝트에서 사용만 해주면 된다. 😄</p>\n<br/>\n<h1 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h1>\n<ul>\n<li><a href=\"https://www.graphql-code-generator.com/docs/getting-started\">https://www.graphql-code-generator.com/docs/getting-started</a></li>\n</ul>\n<br/>","frontmatter":{"title":"GraphQL Code Generator로 타입선언 자동화하기","date":"July 25, 2022"}}},"pageContext":{"slug":"/TypeScript/graphql-codegen/","previous":{"fields":{"slug":"/CS/graphql/"},"frontmatter":{"title":"GraphQL"}},"next":{"fields":{"slug":"/PS/b16968/"},"frontmatter":{"title":"[백준/JS] 16968번 - 차량 번호판 1"}}}},"staticQueryHashes":["2486386679","3128451518"]}