{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/manage-types/","result":{"data":{"site":{"siteMetadata":{"title":"leo-xee.io","author":"Leo-Xee","siteUrl":"https://leo-xee.github.io","comment":{"disqusShortName":"","utterances":"leo-xee/blog-comments"},"sponsor":{"buyMeACoffeeId":"leoxexe"}}},"markdownRemark":{"id":"845b72fe-a463-585f-b2d9-68306c4f54c9","excerpt":"React 및 Next.js 프로젝트를 Typescript로 구현하면서 각기 다른 위치에 커스텀 타입 선언이 생겨나서 관리가 힘들어지는 문제가 발생했습니다. 이러한 문제를 해결하기 위한 방법을 정리합니다. 문제 React와 Next.js 같은 프로젝트에서 Typescript를 일반적으로 사용하기 시작하면서 컴포넌트 파일 및 다른 파일들의 내부에 커스텀 타입 정의들이 중구난방으로 생겨나기 시작했다. 물론 export만 잘해준다면 IDE…","html":"<p><img src=\"/46315e3e96837a2b48949e839c7dc27b/thumbNail.gif\"></p>\n<p>React 및 Next.js 프로젝트를 Typescript로 구현하면서 각기 다른 위치에 커스텀 타입 선언이 생겨나서 관리가 힘들어지는 문제가 발생했습니다. 이러한 문제를 해결하기 위한 방법을 정리합니다.</p>\n<h1 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h1>\n<p>React와 Next.js 같은 프로젝트에서 Typescript를 일반적으로 사용하기 시작하면서 컴포넌트 파일 및 다른 파일들의 내부에 커스텀 타입 정의들이 중구난방으로 생겨나기 시작했다. 물론 export만 잘해준다면 IDE가 잘 찾아주겠지만 나는 타입 파일들은 타입대로 하나의 폴더에서 관리해서 사용하고 싶었다.</p>\n<h1 id=\"타입-관련-파일-분리하기\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EA%B4%80%EB%A0%A8-%ED%8C%8C%EC%9D%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"타입 관련 파일 분리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 관련 파일 분리하기</h1>\n<p>일단 타입 관련된 파일을 분리하기 위해서 프로젝트 루트 위치의 <code class=\"language-text\">src</code> 디렉토리 내부에 <code class=\"language-text\">@types</code>라는 디렉토리를 생성한다. 이제부터 컴포넌트의 Props의 타입을 제외한 모든 타입을 <code class=\"language-text\">@types</code> 디렉토리에서 관리할 것이다.</p>\n<p>이를 위해서는 Typescript 컴파일러가 인식할 수 있도록 다음과 같이 <code class=\"language-text\">@types</code>를 포함해주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* tsconfig.json */</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom.iterable\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"next-env.d.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./src/@types\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 추가</span>\n  <span class=\"token string\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"ts-와-dts\" style=\"position:relative;\"><a href=\"#ts-%EC%99%80-dts\" aria-label=\"ts 와 dts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.ts 와 .d.ts</h1>\n<p>Typescript에서는 타입을 정의할 때, 파일의 확장자로 <code class=\"language-text\">.ts</code> 와 <code class=\"language-text\">.d.ts</code> 를 사용할 수 있다. <strong><code class=\"language-text\">.ts</code> 는 Javascript로 컴파일되는 일반적인 타입스크립트 파일이고 <code class=\"language-text\">.d.ts</code>는 선언한 내용이 Typescript 컴파일 시의 문맥에 자동으로 추가되지만 자바스크립트로 컴파일되지는 않는 파일이다. 참고로 <code class=\"language-text\">.d.ts</code> 로 정의된 선언을 Ambient라고 부르고 이는 구현을 정의하지 않은 선언을 의미한다.</strong> 이에 대한 자세한 내용은 <a href=\"https://stackoverflow.com/questions/29196657/what-is-the-difference-between-d-ts-vs-ts-in-typescript\">여기</a>를 참고하자.</p>\n<p><code class=\"language-text\">.ts</code> 나 <code class=\"language-text\">.d.ts</code> 를 사용하던지 큰 차이는 없지만 <code class=\"language-text\">.d.ts</code> 를 사용하면 <code class=\"language-text\">module</code> 키워드를 사용해서 절대 경로로 <code class=\"language-text\">import</code> 할 수 있는 장점이 있다. 그래서 나는 <code class=\"language-text\">.d.ts</code> 파일을 사용해서 타입 정의를 할 것이다. 이에 대한 예시는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* src/@types/&lt;something>.d.ts */</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"&lt;something>\"</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Leo</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Ryan</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Leo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'&lt;something>'</span>\n\n<span class=\"token keyword\">const</span> friend<span class=\"token operator\">:</span> Leo <span class=\"token operator\">=</span> <span class=\"token string\">\"leo's friend\"</span></code></pre></div>\n<p>이제 프로젝트에서 Typescript의 타입 정의를 하나의 디렉토리에서 관리해서 쾌적한 환경에서 프로젝트를 구현해보자~!!\n😊</p>\n<h1 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h1>\n<ul>\n<li><a href=\"https://typescript-kr.github.io/pages/modules.html\">https://typescript-kr.github.io/pages/modules.html</a></li>\n</ul>\n<br>","frontmatter":{"title":"[TS] 프로젝트에서 타입 관리하기","date":"May 16, 2022"}}},"pageContext":{"slug":"/TypeScript/manage-types/","previous":{"fields":{"slug":"/Tools/vim/"},"frontmatter":{"title":"Vim"}},"next":{"fields":{"slug":"/Error/eslint-label/"},"frontmatter":{"title":"Error: A form label must be associated with a control."}}}}}