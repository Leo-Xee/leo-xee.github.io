{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/setup-cpp/","result":{"data":{"site":{"siteMetadata":{"title":"leo-xee.io","author":"Leo-Xee","siteUrl":"https://leo-xee.github.io","comment":{"disqusShortName":"","utterances":"leo-xee/blog-comments"},"sponsor":{"buyMeACoffeeId":"leoxexe"}}},"markdownRemark":{"id":"3ef3723f-4aff-5e67-ab53-08815b4eba3f","excerpt":"이 글에서는 MacOS에 C++로 알고리즘 문제를 풀기 위한 환경을 구축하는 방법을 정리합니다. 물론 VSC의 extension을 설치하는 방법도 있지만 이 글에서는 터미널 환경에서 GCC를 설치하고 설정하는 내용을 다룹니다. GCC 설치하기 Homebrew로 gcc를 설치한다.\ngcc는 GNU Compiler Collection의 약자이며 C와 C++등의 언어를 지원하는 컴파일러들 중에 하나이다. 설치 완료 후, 원하는 디렉토리를 하나 만들고 해당 디렉토리로 이동한다.\n나는 PS…","html":"<p><img src=\"/38ae546c869fb46ab9ba1e018dc73a45/thumbNail.gif\"></p>\n<p>이 글에서는 MacOS에 C++로 알고리즘 문제를 풀기 위한 환경을 구축하는 방법을 정리합니다. 물론 VSC의 extension을 설치하는 방법도 있지만 이 글에서는 터미널 환경에서 GCC를 설치하고 설정하는 내용을 다룹니다.</p>\n<h1 id=\"gcc-설치하기\" style=\"position:relative;\"><a href=\"#gcc-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"gcc 설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GCC 설치하기</h1>\n<p>Homebrew로 gcc를 설치한다.\ngcc는 GNU Compiler Collection의 약자이며 C와 C++등의 언어를 지원하는 컴파일러들 중에 하나이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew update\n$ brew <span class=\"token function\">install</span> gcc</code></pre></div>\n<p>설치 완료 후, 원하는 디렉토리를 하나 만들고 해당 디렉토리로 이동한다.\n나는 PS라는 디렉토리를 만들고 여기에서 문제들을 푼 소스코드를 관리할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> PS\n$ <span class=\"token builtin class-name\">cd</span> PS</code></pre></div>\n<p>PS 디렉토리에 vi 편집기로 컴파일러의 동작을 확인해볼 <code class=\"language-text\">test.cpp</code> 파일을 생성하고</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> test.cpp</code></pre></div>\n<p>아래의 소스코드를 입력한 후에 <code class=\"language-text\">:wq</code>로 저장하고 종료한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* test.cpp */</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>저장한 <code class=\"language-text\">test.cpp</code> 파일을 아래의 명령어로 컴파일한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ g++ -std<span class=\"token operator\">=</span>c++14 -Wall test.cpp</code></pre></div>\n<ul>\n<li><code class=\"language-text\">g++</code> : gcc로 C++을 컴파일( C를 컴파일 하기위해서는 gcc를 사용)</li>\n<li><code class=\"language-text\">-std=c++14</code> : C++14 버전으로 컴파일</li>\n<li><code class=\"language-text\">-Wall</code> : 엄격한 규칙으로 컴파일</li>\n</ul>\n<h1 id=\"bitsstdch-헤더-파일-사용하기\" style=\"position:relative;\"><a href=\"#bitsstdch-%ED%97%A4%EB%8D%94-%ED%8C%8C%EC%9D%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"bitsstdch 헤더 파일 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bits/stdc++.h 헤더 파일 사용하기</h1>\n<p>위의 에러를 해결하기 전에 간략히 설명하자면 <code class=\"language-text\">bits/stdc++.h</code>는 모든 표준 라이브러리의 선언을 포함하는 헤더파일이다. 이를 사용하면 알고리즘을 풀 때 자주 사용하는 라이브러리들을 미리 컴파일 해주기 때문에 일일이 추가해줄 필요는 없어진다.</p>\n<p>하지만 전체 소프트웨어공학적으로 보면 사용하지 않는 라이브러리도 모두 컴파일하기 때문에 시간이나 공간을 낭비하게 된다는 단점이 있다. 하지만 우리는 각각의 알고리즘 문제를 풀기 위함이기 때문에 큰 문제는 없다.</p>\n<p><code class=\"language-text\">bits/stdc++.h</code>는 아래과 같이 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#include &lt;bits/stdc++.h></span></code></pre></div>\n<p><code class=\"language-text\">bits/stdc++.h</code>는 표준 라이브러리가 아니기 때문에 따로 작업을 해줘야한다. 그래서 에러가 발생한 것이다.\n이를 위해 아래 명령어로 <code class=\"language-text\">/usr/local/include</code>로 이동한 후에 <code class=\"language-text\">bits</code>라는 디렉토리를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /usr/local/include\n<span class=\"token function\">mkdir</span> bits</code></pre></div>\n<p>vi 편집기로 <code class=\"language-text\">bits</code> 안에 <code class=\"language-text\">stdc++.h</code> 파일을 생성하고</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> stdc++.h</code></pre></div>\n<p>해당 파일에 아래의 소스코드를 붙여 넣은 다음 <code class=\"language-text\">:wq</code>로 저장하고 종료한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"script\"><pre class=\"language-script\"><code class=\"language-script\">#ifndef _GLIBCXX_NO_ASSERT\n#include &lt;cassert&gt;\n#endif\n\n#include &lt;cctype&gt;\n#include &lt;cerrno&gt;\n#include &lt;cfloat&gt;\n#include &lt;ciso646&gt;\n#include &lt;climits&gt;\n#include &lt;clocale&gt;\n#include &lt;cmath&gt;\n#include &lt;csetjmp&gt;\n#include &lt;csignal&gt;\n#include &lt;cstdarg&gt;\n#include &lt;cstddef&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cstring&gt;\n#include &lt;ctime&gt;\n\n#if __cplusplus &gt;= 201103L\n#include &lt;ccomplex&gt;\n#include &lt;cfenv&gt;\n#include &lt;cinttypes&gt;\n#include &lt;cstdbool&gt;\n#include &lt;cstdint&gt;\n#include &lt;ctgmath&gt;\n#include &lt;cwchar&gt;\n#include &lt;cwctype&gt;\n#endif\n\n// C++\n#include &lt;algorithm&gt;\n#include &lt;bitset&gt;\n#include &lt;complex&gt;\n#include &lt;deque&gt;\n#include &lt;exception&gt;\n#include &lt;fstream&gt;\n#include &lt;functional&gt;\n#include &lt;iomanip&gt;\n#include &lt;ios&gt;\n#include &lt;iosfwd&gt;\n#include &lt;iostream&gt;\n#include &lt;istream&gt;\n#include &lt;iterator&gt;\n#include &lt;limits&gt;\n#include &lt;list&gt;\n#include &lt;locale&gt;\n#include &lt;map&gt;\n#include &lt;memory&gt;\n#include &lt;new&gt;\n#include &lt;numeric&gt;\n#include &lt;ostream&gt;\n#include &lt;queue&gt;\n#include &lt;set&gt;\n#include &lt;sstream&gt;\n#include &lt;stack&gt;\n#include &lt;stdexcept&gt;\n#include &lt;streambuf&gt;\n#include &lt;string&gt;\n#include &lt;typeinfo&gt;\n#include &lt;utility&gt;\n#include &lt;valarray&gt;\n#include &lt;vector&gt;\n\n#if __cplusplus &gt;= 201103L\n#include &lt;array&gt;\n#include &lt;atomic&gt;\n#include &lt;chrono&gt;\n#include &lt;condition_variable&gt;\n#include &lt;forward_list&gt;\n#include &lt;future&gt;\n#include &lt;initializer_list&gt;\n#include &lt;mutex&gt;\n#include &lt;random&gt;\n#include &lt;ratio&gt;\n#include &lt;regex&gt;\n#include &lt;scoped_allocator&gt;\n#include &lt;system_error&gt;\n#include &lt;thread&gt;\n#include &lt;tuple&gt;\n#include &lt;typeindex&gt;\n#include &lt;type_traits&gt;\n#include &lt;unordered_map&gt;\n#include &lt;unordered_set&gt;\n#endif</code></pre></div>\n<h1 id=\"동작-확인하기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9E%91-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"동작 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동작 확인하기</h1>\n<p>이제 모든 설치 및 세팅을 완료했다. 이전에 오류가 발생 했던 PS 디렉토리 내의 <code class=\"language-text\">test.cpp</code> 파일을 아래의 명령어로 다시 컴파일 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ g++ -std<span class=\"token operator\">=</span>c++14 -Wall test.cpp -o test.out</code></pre></div>\n<p>그러면 <code class=\"language-text\">test.out</code> 이라는 컴파일된 파일을 생성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── test.cpp\n└── test.out</code></pre></div>\n<p>이제 아래의 명령어로 컴파일된 <code class=\"language-text\">test.out</code>을 실행하면 정상적으로 <code class=\"language-text\">Hello Wolrd</code>가 출력되는 것을 확인 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./test.out</code></pre></div>\n<br/>","frontmatter":{"title":"MacOS에 코딩테스트를 위한 C++ 환경 구축하기","date":"December 25, 2021"}}},"pageContext":{"slug":"/Algorithm/setup-cpp/","previous":{"fields":{"slug":"/Error/node-router/"},"frontmatter":{"title":"Error: Router.use() requires a middleware function but got a Object"}},"next":{"fields":{"slug":"/Algorithm/big-o-complexity/"},"frontmatter":{"title":"시간복잡도와 공간복잡도"}}}}}