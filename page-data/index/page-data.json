{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"leo-xee.io","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"이 글에서는 Next.js와 Typescript 환경에 Emotion을 적용하고 GlobalStyle, Theming 그리고 폰트 적용과 같은 주요 기능의 사용법을 정리합니다. Emotion Emotion은 개발자 친화적인 CSS-in-JS 라이브러리이다. 일반적으로 CSS-in-JS의 생태계에서 Styled-Components와 Emotion이 양분하고…","fields":{"slug":"/CSS/emoion-basic/"},"frontmatter":{"date":"May 04, 2022","title":"Emotion","category":"CSS","draft":false}}},{"node":{"excerpt":"NestJS란? NestJS는 효율적이고 안정적이며 확장에 용이한 Node 기반 서버 애플리케이션을 구축하기 위한 웹 서버 프레임워크이다. 기존 웹 서버 프레임워크의 경우에는 쉽게 서버를 만들 수 있고 높은 자유도를 가진다는 장점이 있지만 시스템 아키텍처 관점에서의 지원은 거의 없었다. 그렇기 때문에 애플리케이션의 규모가 커질수록 유지보수를 위해 개발자가…","fields":{"slug":"/Nest/nest/"},"frontmatter":{"date":"May 02, 2022","title":"NestJS","category":"Nest","draft":false}}},{"node":{"excerpt":"이 글에서 next-create-app을 이용하지않고 Typescript, Jest, Testing-Library, ESLint(Airbnb), Prettier를 사용해서 직접 Next.js(12+) 환경을 구축하는 과정을 정리합니다. 전체 코드는 여기에서 확인할 수 있습니다. Next.js 먼저 Next.js를 사용하기 위한 필수 패키지들을 설치한다. …","fields":{"slug":"/React/next-setup-allinone/"},"frontmatter":{"date":"April 26, 2022","title":"밑바닥부터 Next.js 개발 환경 구축하기 - All in One","category":"React","draft":false}}},{"node":{"excerpt":"이 글에서는 밑바닥부터 개발 환경 구축하기 3편에 이어서 Jest와 react-testing-library를 사용해서 테스트 환경을 구축하는 과정을 정리합니다. 시리즈 밑바닥부터 React 개발 환경 구축하기 - 1. Webpack 밑바닥부터 React 개발 환경 구축하기 - 2. Typescript 밑바닥부터 React 개발 환경 구축하기 - 3. Es…","fields":{"slug":"/React/react-setup-jest/"},"frontmatter":{"date":"April 11, 2022","title":"밑바닥부터 React 개발 환경 구축하기 - 4. Jest와 Testing-Library","category":"React","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 2309 - 일곱 난쟁이 📝 문제 설명 왕비를 피해 일곱 난쟁이들과 함께 평화롭게 생활하고 있던 백설공주에게 위기가 찾아왔다. 일과를 마치고 돌아온 난쟁이가 일곱 명이 아닌 아홉 명이었던 것이다. 아홉 명의 난쟁이는 모두 자신이 “백설 공주와 일곱 난쟁이”의 주인공이라고 주장했다. 뛰어난 수학적 직관력을 가지고 있던 백설공주는, 다행스럽게도…","fields":{"slug":"/PS/b2309/"},"frontmatter":{"date":"March 31, 2022","title":"[백준/C++/JS] 2309번 - 일곱 난쟁이","category":"PS","draft":false}}},{"node":{"excerpt":"⚠️ 에러 내용 React Typescript에서 이미지를 할 때 아래와 같은 에러가 발생했다.  📌 에러 원인 이는 하려는 이미지의 확장자인 를 타입스크립트에게 허용해주지 않아서 발생하는 문제이다. ✅ 해결 방법  위치에 와 그 내부에  디렉터리를 생성하고 아래와 같이 작성하면 문제가 해결된다.","fields":{"slug":"/Error/ts-import-img/"},"frontmatter":{"date":"March 22, 2022","title":"Error: Cannot find module '@/assets/logo_kart.png' or its corresponding type declarations.","category":"Error","draft":false}}},{"node":{"excerpt":"⚠️ 에러 내용 CRA의 타입스크립트 프로젝트에 절대 경로를 사용하기 위해서 와  패키지를 설치했다. 그리고 세팅하던 중에  파일에서 아래와 같은 에러가 발생했다.   📌 에러 원인 타입스크립트의 ESlint 규칙을 사용할 때  파일의  옵션 부분에 명시되지 않은 파일에 ESlint를 적용을 자꾸 시도하려고 할 때 발생하는 에러이다. 이 글에서 자세한 원인…","fields":{"slug":"/Error/eslint-parseroption/"},"frontmatter":{"date":"March 21, 2022","title":"Error: \"parserOptions.project\" has been set for @typescript-eslint/parser","category":"Error","draft":false}}},{"node":{"excerpt":"프론트엔드 테스트에 대해서 공부하다가 MSW라는 유용한 라이브러리를 알게되어 이에 대한 개념과 간단하게 사용한 내용을 정리합니다. MSW란? MSW(Mock Service Worker)는 API를 모킹하는 라이브러리이다. 이는 Service Worker API를 활용해서 네트워크 레벨에서 실제 HTTP 요청을 가로챈 다음에 개발자가 미리 작성한 모의 응답…","fields":{"slug":"/React/react-msw/"},"frontmatter":{"date":"March 18, 2022","title":"MSW로 모킹하기","category":"React","draft":false}}},{"node":{"excerpt":"REST API란? REST(REprecentational State Transfer)는 HTTP 통신에서 어떤 자원에 대한 CRUD 요청을 Resource와 Method로 표현하여 특정한 형태로 전달하는 아키텍쳐 스타일을 의미한다. 이는 HTTP의 주요 저자 중 한 사람인 로이 필딩(Roy Fielding)의 2000년 박사학위 논문에서 소개되었다. R…","fields":{"slug":"/CS/rest-api/"},"frontmatter":{"date":"March 13, 2022","title":"REST API","category":"CS","draft":false}}},{"node":{"excerpt":"⚠️ 에러 내용 React의 ContextAPI를 사용해서 코드를 작성하다가 다음과 같은 타입에러가 발생했다.  📌 에러 원인 내가 생각했을 때는  함수의 파라미터 중 하나인 은  타입만을 전달받기 때문에 단순하게 타입을  으로 선언했었다. 하지만 타입스크립트 컴파일러는 로 관리되고 있는  객체의 으로 , 가 아닌 문자열이 들어왔을 때는 에러가 발생할 수 …","fields":{"slug":"/Error/ts-no-indexsignature/"},"frontmatter":{"date":"March 12, 2022","title":"Error: No index signature with a parameter of type 'string' was found on type 'OrderContextState'","category":"Error","draft":false}}},{"node":{"excerpt":"빈 디렉터리에 .gitkeep 추가하기 팀 프로젝트를 진행 할 때 프로젝트의 초기 환경을 세팅하면서 기본적인 디렉터리 구조를 포함해서 원격 저장소에 올리고 싶은 경우가 있다. 하지만 Git은 빈 디렉토리를 추적하지 않고 이에 대한 부가적인 기능 또한 제공하지 않는다. 그렇기 때문에 원격 저장소에 올리고 싶은 빈 디렉토리안에 빈 파일을 하나 작성하는 방식을…","fields":{"slug":"/DevOps/git-emptydir/"},"frontmatter":{"date":"February 28, 2022","title":"[Git] Git에서 빈 디렉토리 추가하기","category":"DevOps","draft":false}}},{"node":{"excerpt":"Critical Rendering Path 일단 웹 브라우저가 웹 페이지를 출력하기 위해서는 서버로부터 HTML 파일을 다운받아서 사용자의 화면에 픽셀을 그려내기까지 많은 과정을 거친다. 이렇게 웹 브라우저가 웹페이지를 최초로 그려내기 위해 필요한 일련의 과정을 Critical Rendering Path(CRP)라고 한다.  이 과정은 크게 6단계로 구성…","fields":{"slug":"/Web/browser-rendering/"},"frontmatter":{"date":"February 27, 2022","title":"웹 브라우저의 렌더링","category":"Web","draft":false}}},{"node":{"excerpt":"⚠️ 에러 내용 최근에 팀 프로젝트를 진행하면서 내가 Eslint와 Prettier를 포함한 초기 개발 환경 세팅을 담당하게 되었는데 이를 pull 받은 팀원 중 일부의 VSC 상에서 다음과 같은 에러가 발생한다는 피드백을 받았다.  📌 에러 원인 뜬금없는 에러 내용이라서 당황했지만 에러가 발생하는 팀원들이 공통적으로 Windows OS 환경에서 작업하고 …","fields":{"slug":"/Error/prettier-crlf/"},"frontmatter":{"date":"February 27, 2022","title":"Error: Prettier 에러를 발생시키는 CR과 LF의 차이","category":"Error","draft":false}}},{"node":{"excerpt":"와 는 함수의 인자(argument)로 변수가 들어와서 매개변수(parameter)로 전달되는 경우에 어떤 방식으로 전달되는 지를 결정하는 방식입니다. 일단 인자와 매개변수의 개념부터 정리하고 본론으로 넘어가겠습니다. 인자와 매개변수 인자(argument)는 어떤 함수가 호출될 때 전달되는 값을 의미하고 매개변수(parameter)는 전달된 값을 받아들이…","fields":{"slug":"/JavaScript/callby-value-reference/"},"frontmatter":{"date":"February 16, 2022","title":"Call by value와 Call by reference","category":"JavaScript","draft":false}}},{"node":{"excerpt":"이 글에서는 밑바닥부터 React 개발 환경 구축하기 2편에 이어서 eslint와 prettier 그리고 airbnb의 typescript lint 규칙을 설정하는 과정을 정리합니다. 시리즈 밑바닥부터 React 개발 환경 구축하기 - 1. Webpack 밑바닥부터 React 개발 환경 구축하기 - 2. Typescript 밑바닥부터 React 개발 환경…","fields":{"slug":"/React/react-setup-eslint/"},"frontmatter":{"date":"February 05, 2022","title":"밑바닥부터 React 개발 환경 구축하기 - 3. Eslint와 Prettier","category":"React","draft":false}}},{"node":{"excerpt":"이 글에서는 밑바닥부터 React 개발 환경 구축하기 1편에 이어서 Typescript를 설치 및 적용하는 과정을 정리합니다. 시리즈 밑바닥부터 React 개발 환경 구축하기 - 1. Webpack 밑바닥부터 React 개발 환경 구축하기 - 2. Typescript 밑바닥부터 React 개발 환경 구축하기 - 3. Eslint와 Prettier 밑바닥부…","fields":{"slug":"/React/react-setup-ts/"},"frontmatter":{"date":"February 05, 2022","title":"밑바닥부터 React 개발 환경 구축하기 - 2. Typescript","category":"React","draft":false}}},{"node":{"excerpt":"이 글에서는 CRA를 사용하지 않고 웹팩으로 React 개발환경을 구축하는 과정을 정리합니다. 이 과정을 위해서는 Node와 npm 혹은 yarn이 필요합니다. 참고로 Node에는 기본적으로 npm이 포함됩니다. 이 글에서는 yarn을 사용하지만 npm과 큰 차이가 없기에 따라오시기에는 큰 무리는 없을 거라 예상합니다. 시리즈 밑바닥부터 React 개발 …","fields":{"slug":"/React/react-setup-webpack/"},"frontmatter":{"date":"February 04, 2022","title":"밑바닥부터 React 개발 환경 구축하기 - 1. Webpack","category":"React","draft":false}}},{"node":{"excerpt":"useState의 setter는 어떻게 동작하는가? useState의 setter 함수인 setState는 비동기적(Asynchronous)으로 동작한다. 다시말하면  함수의 실행이 완료될 때까지 기다려주지 않고 다음 코드가 곧바로 실행된다는 의미이다. 그렇다면 이런 특징이 에 어떤 영향을 주는 걸까? 다음 예시를 통해서 천천히 살펴보자. 이 예제에서는 …","fields":{"slug":"/React/react-setstate/"},"frontmatter":{"date":"February 03, 2022","title":"비동기로 동작하는 setState와 Batch","category":"React","draft":false}}},{"node":{"excerpt":"React Portals란? Portal은 자식 컴포넌트를 부모 컴포넌트의 외부에 위치한 DOM 노드 안에서 렌더링할 수 있도록 하는 기능이며 React의 16버전에서 추가되었다. 주로 모달이나 툴팁등에 사용한다.  함수는 첫 번째 인자로 렌더링할 React 컴포넌트나 DOM 요소를 받고 두 번째 인자는 렌더링될 DOM 노드를 받는다 Portals로 Mo…","fields":{"slug":"/React/react-portals/"},"frontmatter":{"date":"January 29, 2022","title":"React Portals","category":"React","draft":false}}},{"node":{"excerpt":"⚠️ 에러 내용 React에서 SVG 파일을 다음과 같이 사용할 때 다음과 같은 에러가 발생했다.  📌 에러 원인 React를 직접 세팅한 프로젝트에서 이런 에러가 발생해서 내가 세팅 과정에서 잘못해서 발생한 줄 알았는데 Github issues를 보면 CRA로 세팅해서 eject한 프로젝트에서도 동일하게 발생하는 걸 보니 그건 아닌 것 같다. 대충 web…","fields":{"slug":"/Error/react-svg/"},"frontmatter":{"date":"January 18, 2022","title":"Error: Failed to execute \"createElement\" on \"Document\": The tag name provided is not a valid name","category":"Error","draft":false}}},{"node":{"excerpt":"웹 폰트를 적용하는 방법 애플리케이션에 웹 폰트를 적용하는 방법은 크게 2가지가 있다. CDN을 사용하는 방법 : ,  Local의 폰트파일을 직접 사용하는 방법 :  웹 폰트를 CDN으로 사용하는 것이 편하지만 해당 폰트가 적용된 요소를 렌더링하는 속도가 느려지는 경향이 있기 때문에 이 포스트에서는 Local에 다운받은 웹 폰트파일을 적용하는 방법을 정…","fields":{"slug":"/React/react-font/"},"frontmatter":{"date":"January 18, 2022","title":"React 프로젝트에 폰트 적용하기","category":"React","draft":false}}},{"node":{"excerpt":"타입스크립트란? 타입스크립트(Typescript)는 자바스크립트에 타입을 추가한 언어이다. 자바스크립트를 확장한 언어라고 해서 주로 자바스크립트의 상위집합(SuperSet)이라고 한다. 타입스크립트가 하나의 언어이기는 하지만 Node나 브라우저는 자바스크립트만을 인식하기 때문에 타입스크립트를 자바스크립트로 변환하는 과정이 필요한데 이를 컴파일(Compil…","fields":{"slug":"/TypeScript/introduce/"},"frontmatter":{"date":"January 15, 2022","title":"[TS] 타입스크립트 소개 및 기초","category":"Typescript","draft":false}}},{"node":{"excerpt":"Next.js란? Next.js는 SSR(Server Side Rendering)을 쉽게 구현할 수 있는 개발 환경을 제공하는 React의 프레임워크이다. 물론 React도 SSR을 고려해서 설계되었기 때문에 React만으로 SSR을 구현할 수도 있지만 이를 위해서 설정하는 과정이 꽤나 복잡하다고 한다. 이외에도 다양한 이유로 현재 Next.js가 많이 …","fields":{"slug":"/React/next/"},"frontmatter":{"date":"January 10, 2022","title":"Next.js","category":"React","draft":false}}},{"node":{"excerpt":"웹 개발자라면 제대로 이해하고 있어야할 용어인 CSR/SSR 뿐만 아니라 SPA/MPA, SSG, PWA, TTV, TTI에 대해서 정리합니다. 🧐 CSR  CSR은 한 마디로 요약하면 Client가 모든 일을 다한다는 의미이다. 먼저 서버로부터 HTML 파일 받는데 이 HTML 파일의 body에는  와 자바스크립트의 링크들만 작성되어 있고 거의 빈 파일…","fields":{"slug":"/Web/csr-ssr/"},"frontmatter":{"date":"December 29, 2021","title":"CSR vs SSR","category":"Web","draft":false}}},{"node":{"excerpt":"알고리즘의 성능을 판단하는 척도 정확성 (Output이 얼마나 정확한가?) 작업량 (얼마나 적은 연산을 필요로 하는가?) 메모리 사용량 (얼마나 적은 공간을 필요로 하는가?) 단순성 (얼마나 단순한가?) 최적성 (더 이상 개선할 여지가 없을만큼 최적화가 잘 되었는가?) 시간복잡도 시간복잡도는 어떠한 문제를 해결하기 위해서 소요되는 시간을 의미하며 위의 척…","fields":{"slug":"/Algorithm/big-o-complexity/"},"frontmatter":{"date":"December 28, 2021","title":"시간복잡도와 공간복잡도","category":"Algorithm","draft":false}}},{"node":{"excerpt":"Concurrently란? Concurrently는 여러 개의 명령어를 동시에 실행할 수 있도록 해주는 패키지이다. 이 패키지를 사용하면 frontend와 backend에서 개발용 서버를 따로 실행할 필요도, 터미널의 로그를 따로 확인할 필요도 없다. 설치하기 현재 나의 디렉토리 구조는 다음과 같다. backend에는 Express 서버 프로젝트가, fr…","fields":{"slug":"/Node/concurrently/"},"frontmatter":{"date":"December 26, 2021","title":"Concurrently 사용법","category":"Node","draft":false}}},{"node":{"excerpt":"이 글에서는 MacOS에 C++로 알고리즘 문제를 풀기 위한 환경을 구축하는 방법을 정리합니다. 물론 VSC의 extension을 설치하는 방법도 있지만 이 글에서는 터미널 환경에서 GCC를 설치하고 설정하는 내용을 다룹니다. GCC 설치하기 Homebrew로 gcc를 설치한다.\ngcc는 GNU Compiler Collection의 약자이며 C와 C++등…","fields":{"slug":"/Algorithm/setup-cpp/"},"frontmatter":{"date":"December 25, 2021","title":"MacOS에 코딩테스트를 위한 C++ 환경 구축하기","category":"Algorithm","draft":false}}},{"node":{"excerpt":"⚠️ 에러 내용 Express를 실행할 때 다음과 같은 에러가 발생했다.  📌 에러 원인 에서 를 사용해서 분리해준 파일에서  해주지 않았다. ✅ 해결 방법  부분을 추가하면 정상 동작한다.","fields":{"slug":"/Error/node-router/"},"frontmatter":{"date":"December 24, 2021","title":"Error: Router.use() requires a middleware function but got a Object","category":"Error","draft":false}}},{"node":{"excerpt":"⚠️ 에러 내용 Homebrew로 mysql을 설치하다가 다음과 같이 cask 명령어를 인식하지 못하는 에러가 발생했다.  📌 에러 원인 스택오버플로우의 이 글에서 2021년부터 cask의 사용 방법이 변경되었다는 것을 알 수 있었다. ✅ 해결 방법 brew install —cask 를 사용하면 정상적으로 설치된 것을 확인할 수 있었다.","fields":{"slug":"/Error/unknown-cask/"},"frontmatter":{"date":"December 23, 2021","title":"Error: Unknown command: cask","category":"Error","draft":false}}},{"node":{"excerpt":"컴포넌트 패턴의 문제점 angular.js를 시작으로 React.js와 Vue.js의 인기가 상승하면서 컴포넌트 단위로 개발해 조립하는 방식인 Component 패턴이 현재 프론트엔드 개발의 주류가 되었다. 하지만 애플리케이션의 크기가 커지고 구조가 복잡해지면서 하나의 컴포넌트에서 다른 컴포넌트로 데이터를 전달할 때 그 사이에 있는 모든 컴포넌트들이 해당…","fields":{"slug":"/React/why-state-management/"},"frontmatter":{"date":"December 22, 2021","title":"상태 관리가 필요한 이유","category":"React","draft":false}}},{"node":{"excerpt":"클로저란? 클로저(Closure)란, 내부함수가 외부함수의 지역변수를 참조할 때 외부함수가 소멸(종료)된 후에도 내부함수가 외부함수의 지역변수를 참조할 수 있는 현상을 일컫는다. 위의 설명을 보고 전혀 감이 오지 않을 것이다. 그게 정상이다. 클로저는 단번에 이해하기 쉬운 개념이 아닌 것 같다.\n아래의 한 가지 예제를 통해 클로저를 이해해보도록 하자. 아…","fields":{"slug":"/JavaScript/closure/"},"frontmatter":{"date":"December 18, 2021","title":"[JS] 클로저","category":"JavaScript","draft":false}}},{"node":{"excerpt":"설치하기 ESLint ESLint에 airbnb 규칙을 사용하기 위해서는 를 설치해야한다. 하지만 이 패키지가 의존하고 있는 패키지들도 함께 설치해야하기 때문에 다음의 명령어를 사용해서 먼저 의존성 패키지들을 확인한다. 이제 확인한 의존성 패키지들과 함께 를 설치한다.  : 자바스크립트 코드를 검증 및 확인하는 핵심 라이브러리이다. \n: ES6+의 imp…","fields":{"slug":"/React/react-eslint-airbnb/"},"frontmatter":{"date":"December 16, 2021","title":"React 프로젝트에 airbnb 컨벤션 적용하기","category":"React","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 9012 - 괄호 📝 문제 설명 괄호 문자열(Parenthesis String, PS)은 두 개의 괄호 기호인 ‘(’ 와 ‘)’ 만으로 구성되어 있는 문자열이다. 그 중에서 괄호의 모양이 바르게 구성된 문자열을 올바른 괄호 문자열(Valid PS, VPS)이라고 부른다. 한 쌍의 괄호 기호로 된 “( )” 문자열은 기본 VPS 이라고 부른다…","fields":{"slug":"/PS/b9012/"},"frontmatter":{"date":"December 16, 2021","title":"[백준/JS] 9012번 - 괄호","category":"PS","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 9093 - 단어 뒤집기 📝 문제 설명 문장이 주어졌을 때, 문장의 각 단어를 모두 뒤집어서 출력하는 프로그램을 작성하시오. 단, 단어의 순서는 바꿀 수 없다. 단어는 영어 알파벳으로만 이루어져 있다. 🔑 문제 풀이 문장의 단어 순서를 뒤집어 주기 위해서는 스택을 이용하면 된다. 먼저 각 문장을 공백 단위로 쪼갠 배열로 만들어서 에 할당한다…","fields":{"slug":"/PS/b9093/"},"frontmatter":{"date":"December 16, 2021","title":"[백준/JS] 9093번 - 단어 뒤집기","category":"PS","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 10828 - 스택 📝 문제 설명 정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오. 명령은 총 다섯 가지이다. push X: 정수 X를 스택에 넣는 연산이다. pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다. size:…","fields":{"slug":"/PS/b10828/"},"frontmatter":{"date":"December 16, 2021","title":"[백준/JS] 10828번 - 스택","category":"PS","draft":false}}},{"node":{"excerpt":"프로토타입이란? 흔히 자바스크립트를 프로토타입 언어라고 한다. 그 이유는 자바스크립트에 내장된 객체와 메소드 그리고 함수가 모두 프로토타입(Prototype)이라는 객체를 기반으로 동작하기 때문이다. 이에 대해 이어지는 예시를 통해서 알아보자. 인스턴스의 메소드 실행 일단 프로토타입 객체가 무엇인지를 확인하기 위해서 하나의 인스턴스를 생성하고 그 인스턴스…","fields":{"slug":"/JavaScript/prototype/"},"frontmatter":{"date":"December 13, 2021","title":"[JS] 프로토타입","category":"JavaScript","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 1316 - 그룹 단어 체커 📝 문제 설명 그룹 단어란 단어에 존재하는 모든 문자에 대해서, 각 문자가 연속해서 나타나는 경우만을 말한다. 예를 들면, ccazzzzbb는 c, a, z, b가 모두 연속해서 나타나고, kin도 k, i, n이 연속해서 나타나기 때문에 그룹 단어이지만, aabbbccb는 b가 떨어져서 나타나기 때문에 그룹 단…","fields":{"slug":"/PS/b1316/"},"frontmatter":{"date":"December 12, 2021","title":"[백준/JS] 1316번 - 그룹 단어 체커","category":"PS","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 2941 - 크로아티아 알파벳 📝 문제 설명 예전에는 운영체제에서 크로아티아 알파벳을 입력할 수가 없었다. 따라서, 표와 같이 크로아티아 알파벳을 변경해서 입력했다. 예를 들어, ljes=njak은 크로아티아 알파벳 6개(lj, e, š, nj, a, k)로 이루어져 있다. 단어가 주어졌을 때, 몇 개의 크로아티아 알파벳으로 이루어져 있는지…","fields":{"slug":"/PS/b2941/"},"frontmatter":{"date":"December 11, 2021","title":"[백준/JS] 2941번 - 크로아티아 알파벳","category":"PS","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 5622 - 다이얼 📝 문제 설명 이 다이얼로 숫자 1을 걸려면 총 2초가 필요하다. 1보다 큰 수를 거는데 걸리는 시간은 이보다 더 걸리며, 한 칸 옆에 있는 숫자를 걸기 위해선 1초씩 더 걸린다. 상근이의 할머니는 전화 번호를 각 숫자에 해당하는 문자로 외운다. 즉, 어떤 단어를 걸 때, 각 알파벳에 해당하는 숫자를 걸면 된다. 예를 들…","fields":{"slug":"/PS/b5622/"},"frontmatter":{"date":"December 11, 2021","title":"[백준/JS] 5622번 - 다이얼","category":"PS","draft":false}}},{"node":{"excerpt":"⚠️ 에러 내용 를 사용해서 페이지 인증을 구현하기 위해서 내부에서 를 사용하는데 다음과 같은 에러가 발생했다.  분명히 특정 페이지가 마운트 되기 전에 인증을 한번만 처리해주면 되기 때문에 의존성을 빈 배열로 넘겨주는 것이 맞는데 에러가 발생해서 의문이 들었다. 📌 에러 원인 이와 동일한 에러 발생 원인을 이미 스택오버플로우의 이 글에서 잘 설명해놨으니 …","fields":{"slug":"/Error/react-useeffect-dependency/"},"frontmatter":{"date":"December 10, 2021","title":"Error: React Hook useEffect has a missing dependency","category":"Error","draft":false}}},{"node":{"excerpt":"⚠️ 에러 내용 강의를 보다가 bodyParser 라이브러리를 설치하고 아래와 같이 사용하니까 경고가 발생했다. 📌 에러 원인 ExpressJS v4.16부터는 더이상 bodyParser가 지원되지 않고 해당 라이브러리를 내부에 포함하고 있다. 참고로 bodyParser는 request의 body를 파싱해주는 역할을 한다. 추가로 여기서 사용된 메소드도 알…","fields":{"slug":"/Error/node-bodyparser/"},"frontmatter":{"date":"December 09, 2021","title":"Warning: bodyParser was deprecated","category":"Error","draft":false}}},{"node":{"excerpt":"원격 저장소 생성 Github에 회원가입과 로그인을 하고 Repositories -> New로 이동한다.  원격 저장소의 이름을 입력하고 생성한다.  원격 저장소에 연결 원격 저장소를 생성하면 다음과 같이 친절하게 상황별 가이드를 준다. 나는 이미 로컬 저장소에서 프로젝트를 관리하고 있으므로 두 번째 가이드를 따르겠다.  로컬 저장소의 위치에서 원격 저장…","fields":{"slug":"/DevOps/github-connect/"},"frontmatter":{"date":"December 09, 2021","title":"[Git] 로컬 저장소를 Github에 연결하기 및 끊기","category":"DevOps","draft":false}}},{"node":{"excerpt":"⚠️ 에러 내용 과 를 사용하는데 아래와 같은 에러가 발생했다.  📌 에러 원인 에 묶인 2개의 명령어 중에 두 번째 명령어인 가 정상적으로 동작하지 않아서 front에서 동작하지 않고 첫 번째와 동일하게 server에서 동작하고 있어서 5000번 포트를 2번 열려고 하니 생기는 문제였다. 그래서 찾아보니 과의 를 변경하는 옵션이 서로 달랐다. 차이는 다음…","fields":{"slug":"/Error/yarn-concurrently/"},"frontmatter":{"date":"December 05, 2021","title":"Error: listen EADDRINUSE: address already in use :::Port","category":"Error","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 1157 - 단어 공부 📝 문제 설명 알파벳 대소문자로 된 단어가 주어지면, 이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오. 단, 대문자와 소문자를 구분하지 않는다. 🔑 문제 풀이 일단 대소문자의 구분을 하지 않기 때문에 를 사용해서 을 모두 소문자로 바꿔준다. 그 다음 a-z의 카운트값을 저장할 배열을 만들…","fields":{"slug":"/PS/b1157/"},"frontmatter":{"date":"December 04, 2021","title":"[백준/JS] 1157번 - 단어 공부","category":"PS","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 2675 - 문자열 반복 📝 문제 설명 문자열 S를 입력받은 후에, 각 문자를 R번 반복해 새 문자열 P를 만든 후 출력하는 프로그램을 작성하시오. 즉, 첫 번째 문자를 R번 반복하고, 두 번째 문자를 R번 반복하는 식으로 P를 만들면 된다. S에는 QR Code “alphanumeric” 문자만 들어있다.\nQR Code “alphanume…","fields":{"slug":"/PS/b2675/"},"frontmatter":{"date":"December 03, 2021","title":"[백준/JS] 2675번 - 문자열 반복","category":"PS","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 10809 - 알파벳 찾기 📝 문제 설명 알파벳 소문자로만 이루어진 단어 S가 주어진다. 각각의 알파벳에 대해서, 단어에 포함되어 있는 경우에는 처음 등장하는 위치를, 포함되어 있지 않은 경우에는 -1을 출력하라. 🔑 문제 풀이 생각보다 시간이 많이 걸렸다.. 아직 아스키 코드 관련 String 객체의 메소드에 아직 익숙하지 않은 것 같다.…","fields":{"slug":"/PS/b10809/"},"frontmatter":{"date":"December 02, 2021","title":"[백준/JS] 10809번 - 알파벳 찾기","category":"PS","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 1065 - 한수 📝 문제 설명 어떤 양의 정수 X의 각 자리가 등차수열을 이룬다면, 그 수를 한수라고 한다. 등차수열은 연속된 두 개의 수의 차이가 일정한 수열을 말한다. N이 주어졌을 때, 1보다 크거나 같고, N보다 작거나 같은 한수의 개수를 출력해라. 🔑 문제 풀이 1부터 N까지 for문으로 돌면서 해당 수가 한수이면 count를 +…","fields":{"slug":"/PS/b1065/"},"frontmatter":{"date":"December 02, 2021","title":"[백준/JS] 1065번 - 한수","category":"PS","draft":false}}},{"node":{"excerpt":"🔗 문제 링크 4673 - 셀프 넘버 📝 문제 설명 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의한다. 예를 들면, d(75) = 75+7+5 = 87이다.\n이때 75를 87의 생성자라고 한다. 이 함수로 33부터 시작하는 무한 수열을 만들어보면 33, 39, 51, 69… 이 된다.\n생성자가 없는 숫자를 셀프 넘버라고 한…","fields":{"slug":"/PS/b4673/"},"frontmatter":{"date":"December 02, 2021","title":"[백준/JS] 4673번 - 셀프 넘버","category":"PS","draft":false}}},{"node":{"excerpt":"this란?  자바스크립트는 실행 컨텍스트 내부에  이라는  를 담당하는 객체가 있기 때문에 의 바인딩은 해당 실행 컨텍스트가 생성될 때 세팅된다. 즉, 실행 컨텍스트는 함수가 호출될 때 생성되기 때문에 는 함수가 호출되는 순간에 결정된다고 할 수 있다. 더나아가 함수가 호출될 때 결정되므로 함수가 호출되는 방식에 따라서 는 얼마든지 달라질 수 있다. t…","fields":{"slug":"/JavaScript/this/"},"frontmatter":{"date":"December 02, 2021","title":"[JS] this","category":"JavaScript","draft":false}}},{"node":{"excerpt":"실행 컨텍스트란? 실행 컨텍스트(Execution Context)는 코드가 실행되기 위해 필요한 환경을 의미한다. 이 개념은 스코프 체인(Scope Chain), 호이스팅(Hoisting), this, 클로저(Closure)등의 동작을 설명할 수 있는 자바스크립트의 핵심 원리이다. 자바스크립트는 실행 컨텍스트(코드가 실행되기 위해 필요한 환경)라는 환경의…","fields":{"slug":"/JavaScript/execution-context/"},"frontmatter":{"date":"November 30, 2021","title":"[JS] 실행 컨텍스트","category":"JavaScript","draft":false}}},{"node":{"excerpt":"데이터 타입의 분류 자바스크립트의 데이터 타읍은 크게 2종류로 나누어진다. 기본형 타입(Primitive Type) Number String Boolean Null Undefined Symbol 참조형 타입(Reference Type) Array Function RegExp Set/WeakSet Map/WeakMap 메모리 참조 방법 기본형 타입  임의의…","fields":{"slug":"/JavaScript/datatype-referMemory/"},"frontmatter":{"date":"November 27, 2021","title":"[JS] 데이터 타입과 메모리 참조 방법","category":"JavaScript","draft":false}}}]}},"pageContext":{}}}