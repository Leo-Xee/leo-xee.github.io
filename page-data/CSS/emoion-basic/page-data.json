{"componentChunkName":"component---src-templates-blog-post-js","path":"/CSS/emoion-basic/","result":{"data":{"site":{"siteMetadata":{"title":"leo-xee.io","author":"Leo-Xee","siteUrl":"https://leo-xee.github.io","comment":{"disqusShortName":"","utterances":"leo-xee/blog-comments"},"sponsor":{"buyMeACoffeeId":"leoxexe"}}},"markdownRemark":{"id":"bbe88599-dc54-50c0-870f-a9c5dbf55321","excerpt":"이 글에서는 Next.js와 Typescript 환경에 Emotion을 적용하고 GlobalStyle, Theming 그리고 폰트 적용과 같은 주요 기능의 사용법을 정리합니다. Emotion Emotion은 개발자 친화적인 CSS-in-JS 라이브러리이다. 일반적으로 CSS-in-JS의 생태계에서 Styled-Components와 Emotion이 양분하고 있는데 npm treads를 통해 확인해보면 Emotion이 좀 더 많이 사용되고 있다.Emotion이 Styled-Components…","html":"<p><img src=\"/f8ee04867e8cac62d68704eb983ddd1e/CSS.gif\"></p>\n<p>이 글에서는 Next.js와 Typescript 환경에 Emotion을 적용하고 GlobalStyle, Theming 그리고 폰트 적용과 같은 주요 기능의 사용법을 정리합니다.</p>\n<h1 id=\"emotion\" style=\"position:relative;\"><a href=\"#emotion\" aria-label=\"emotion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Emotion</h1>\n<p><strong>Emotion은 개발자 친화적인 CSS-in-JS 라이브러리이다.</strong> 일반적으로 CSS-in-JS의 생태계에서 Styled-Components와 Emotion이 양분하고 있는데 <a href=\"https://www.npmtrends.com/@emotion/styled-vs-styled-components-vs-@emotion/react\">npm treads</a>를 통해 확인해보면 Emotion이 좀 더 많이 사용되고 있다.Emotion이 Styled-Components보다 빌드 사이즈가 조금 작지만 유의미한 차이는 아니다.</p>\n<p>Next.js에서의 차이라면 Styled-Components를 사용하기 위해서는 추가적인 설정이 필요한 반면에 Emotion은 필요없다는 것이다. 이런 특징 때문에 개발자 친화적이라고 소개하고 있는 것 같은데 최근에는 Next.js에서 Styled-Components를 위한 설정도 제공하고 있어서 사용함에 있어서 두 라이브러리의 차이는 거의 없어지는 것 같다.</p>\n<h1 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h1>\n<p>Next.js에서 Emotion을 사용하기 위해서 다음과 같은 패키지들을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># react에서 emotion을 사용하기 위한 패키지들</span>\n$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @emotion/react @emotion/styled</code></pre></div>\n<p>Emotion을 Next.js의 Typescript 환경에서 사용하기 위해서는 <code class=\"language-text\">tsconfig.json</code>에 <code class=\"language-text\">jsxImportSource</code> 옵션을 다음과 같이 추가해줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">/* tsconfig.json */</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token property\">\"jsxImportSource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@emotion/react\"</span>\n    <span class=\"token comment\">//..</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h1>\n<p>이제 Emotion이 제공하는 주요 기능들 몇 가지를 알아보자. 참고로 정말 기본적인 기능은 공식페이지에서 금방 이해할 수 있으니 제외하겠다.</p>\n<h2 id=\"global-styles\" style=\"position:relative;\"><a href=\"#global-styles\" aria-label=\"global styles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Global Styles</h2>\n<p><strong>Emotion은 모든 페이지에 특정한 스타일을 사용할 수 있는 글로벌 스타일 기능을 제공한다.</strong> 보통 브라우저의 기본 스타일을 제거하기 위해서 <code class=\"language-text\">reset.css</code> 를 적용할 때 사용하는 편이다. 그럼 <code class=\"language-text\">reset.css</code> 를 한번 적용해보자.</p>\n<p>먼저 Emotion에서 글로벌 스타일을 적용하기 위해서는 <code class=\"language-text\">GlobalStyle.tsx</code> 파일을 생성하고 다음과 같이 작성한다. 참고로 파일명은 달라도 상관없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* GlobalStyle.tsx */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> css<span class=\"token punctuation\">,</span> Global <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span>\n\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  /* reset.css 관련 코드 작성 */\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">GlobalStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Global</span></span> <span class=\"token attr-name\">styles</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> GlobalStyle</code></pre></div>\n<p>그리고 어떤 <code class=\"language-text\">reset.css</code> 를 사용할 지에 대해서는 <a href=\"https://velog.io/@teo/2022-CSS-Reset-%EB%8B%A4%EC%8B%9C-%EC%8D%A8%EB%B3%B4%EA%B8%B0\">여기</a>를 확인해보자.</p>\n<p>작성한 글로벌 스타일을 적용하기 위해서는 <code class=\"language-text\">page</code> 디렉토리 내부에 <code class=\"language-text\">_app.tsx</code> 파일을 생성하고 다음과 같이 작성하면 잘 적용될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* _app.tsx */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> AppProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/app\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> GlobalStyle <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/styles/GlobalStyle\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> AppProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GlobalStyle</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>pageProps<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"theming\" style=\"position:relative;\"><a href=\"#theming\" aria-label=\"theming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Theming</h2>\n<p><strong>Emotion은 스타일값 사용을 도와주는 테마 기능 제공한다.</strong> 이는 스타일링된 모든 컴포넌트 내부에서 <code class=\"language-text\">props.theme</code> 로 접근해서 미리 변수에 정의한 스타일 값을 쉽게 사용할 수 있도록 해준다. 그럼 이 기능을 사용해서 일반 모드와 다크 모드의 색상 값을 따로 정의하고 사용해보자.</p>\n<p>먼저 테마별 스타일값을 정의하기 위해서 <code class=\"language-text\">theme.ts</code> 파일을 생성하고 다음과 같이 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* theme.ts */</span>\n\n<span class=\"token keyword\">const</span> light <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  primary<span class=\"token operator\">:</span> <span class=\"token string\">'hotpink'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> dark <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  primary<span class=\"token operator\">:</span> <span class=\"token string\">'gold'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> light<span class=\"token punctuation\">,</span> dark <span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 Typescript에서 사용하기 위해서는 정의한 스타일값의 타입 또한 정의해줘야한다. 그러므로 <code class=\"language-text\">styles.d.ts</code> 파일을 생성하고 다음과 같이 타입을 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* styles.d.ts */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@emotion/react'</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'@emotion/react'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Theme</span> <span class=\"token punctuation\">{</span>\n    light<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      primary<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    <span class=\"token punctuation\">}</span>\n    dark<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      primary<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>정의한 테마를 사용하기 위해서 <code class=\"language-text\">pages</code> 디렉토리 안에 있는 <code class=\"language-text\">_app.tsx</code> 파일의 컴포넌트를 <code class=\"language-text\">ThemeProvider</code>로 감싸준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* _app.tsx */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> AppProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/app\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ThemeProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@emotion/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> GlobalStyle <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/styles/GlobalStyle\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> theme <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/styles/theme\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> AppProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GlobalStyle</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemeProvider</span></span> <span class=\"token attr-name\">theme</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>pageProps<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ThemeProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 정의한 테마가 잘 동작하는 지 확인하기 위해서 <code class=\"language-text\">pages</code> 디렉토리의 <code class=\"language-text\">index.tsx</code> 파일에 다음과 같이 간단한 스타일을 적용하고 실행해보자. 그럼 스타일이 정상적으로 반영되어 있는 것을 확인할 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* index.tsx */</span>\n\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span>\n\n<span class=\"token keyword\">const</span> Heading <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>h1<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> theme <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> theme<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">.</span>primary<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HomePage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Heading</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello Next.js</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Heading</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HomePage</code></pre></div>\n<h2 id=\"font\" style=\"position:relative;\"><a href=\"#font\" aria-label=\"font permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Font</h2>\n<p><strong>프로젝트에 웹 폰트를 적용하는 방법은 <code class=\"language-text\">&lt;link></code>, <code class=\"language-text\">@import</code>로 2가지이다.</strong> 여기서는 <a href=\"https://fonts.google.com/\">구글 폰트</a>를 이용했다.</p>\n<p><code class=\"language-text\">&lt;link></code> 로 폰트를 적용하기 위해서는 <code class=\"language-text\">pages</code> 디렉토리 내부에 <code class=\"language-text\">_document.tsx</code> 파일을 생성하고 다음과 같이 <code class=\"language-text\">&lt;Head></code> 태그 안에 복사한 태그를 위치시키고 <code class=\"language-text\">GlobalStyle.tsx</code> 에 <code class=\"language-text\">font-family</code> 를 적용해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* _document.tsx */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Html<span class=\"token punctuation\">,</span> Head<span class=\"token punctuation\">,</span> Main<span class=\"token punctuation\">,</span> NextScript <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/document'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Document</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Html</span></span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ko<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Head</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preconnect<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://fonts.googleapis.com<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span>\n          <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preconnect<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://fonts.gstatic.com<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">crossOrigin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span>\n          <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://fonts.googleapis.com/css2?family=Noto+Sans+KR&amp;display=swap<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Head</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Main</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NextScript</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Html</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* GlobalStyle.tsx */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> css<span class=\"token punctuation\">,</span> Global <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span>\n\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  // ...\n\n  // 폰트 적용\n  font-family: 'Noto Sans KR', sans-serif;\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">GlobalStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Global</span></span> <span class=\"token attr-name\">styles</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> GlobalStyle</code></pre></div>\n<p><code class=\"language-text\">@import</code> 로 폰트를 적용하기 위해서는 앞서 글로벌 스타일을 적용했던 <code class=\"language-text\">GlobalStyle.tsx</code> 파일에 다음과 같이 폰트의 링크를 추가한 다음에 <code class=\"language-text\">font-family</code> 를 적용해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/* GlobalStyle.tsx */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> css<span class=\"token punctuation\">,</span> Global <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span>\n\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  // ...\n\n  // 폰트 추가\n  @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR&amp;display=swap');\n\n  // 폰트 적용\n  font-family: 'Noto Sans KR', sans-serif;\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">GlobalStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Global</span></span> <span class=\"token attr-name\">styles</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> GlobalStyle</code></pre></div>\n<h1 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h1>\n<ul>\n<li><a href=\"https://emotion.sh/docs/introduction\">https://emotion.sh/docs/introduction</a></li>\n</ul>","frontmatter":{"title":"Emotion","date":"May 04, 2022"}}},"pageContext":{"slug":"/CSS/emoion-basic/","previous":{"fields":{"slug":"/Nest/nest/"},"frontmatter":{"title":"NestJS"}},"next":{"fields":{"slug":"/TypeScript/manage-types/"},"frontmatter":{"title":"[TS] 프로젝트에서 타입 관리하기"}}}}}